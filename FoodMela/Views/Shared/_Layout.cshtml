@using Microsoft.AspNetCore.Identity
@using FoodMela.Models
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@using FoodMela.Data
@inject ApplicationDbContext _context

@{
    ApplicationUser currentUser = null;
    Order latestOrder = null;
    string orderStatus = null;

    if (User.Identity.IsAuthenticated)
    {
        currentUser = await UserManager.GetUserAsync(User);
        if (currentUser != null)
        {
            latestOrder = _context.Orders
                .Where(o => o.UserId == currentUser.Id && o.Status != OrderStatus.Delivered)
                .OrderByDescending(o => o.OrderDate)
                .FirstOrDefault();

            if (latestOrder != null)
            {
                orderStatus = latestOrder.Status.ToString();
            }
        }
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - FoodMela</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/FoodMela.styles.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">FoodMela</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                        @if (SignInManager.IsSignedIn(User))
                        {
                            if (User.IsInRole("Vendor"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-area="" asp-controller="Vendor" asp-action="Dashboard">Vendor Dashboard</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-area="" asp-controller="Vendor" asp-action="Details">My Profile</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="VendorProducts" asp-action="Index">My Products</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Vendor" asp-action="Orders">My Orders</a>
                                </li>
                            }
                            else if (User.IsInRole("Customer"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Customer" asp-action="ProfileView">My Profile</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link btn btn-outline-primary ms-2" asp-controller="Cart" asp-action="Index">
                                        <i class="bi bi-cart"></i> My Cart
                                    </a>
                                </li>
                                @if (!string.IsNullOrEmpty(orderStatus))
                                {
                                    <li class="nav-item">
                                        <a class="nav-link text-primary"
                                           asp-controller="Order"
                                           asp-action="Details"
                                           asp-route-id="@latestOrder.Id">
                                            Order: @orderStatus
                                        </a>
                                    </li>
                                }
                            }
                            else if (User.IsInRole("Admin"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-area="" asp-controller="Admin" asp-action="Dashboard">Admin Panel</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark fw-bold" asp-controller="Admin" asp-action="ManageProducts">
                                        <i class="bi bi-gear-fill"></i> Manage Products
                                    </a>
                                </li>
                            }
                        }
                    </ul>

                    <!-- NEW: Notification Bell -->
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <ul class="navbar-nav">
                            <li class="nav-item dropdown">
                                <a class="nav-link position-relative" href="#" id="notifDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-bell fs-5"></i>
                                    <span id="notifCount" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger d-none">0</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notifDropdown" id="notifList" style="max-height:300px; overflow-y:auto;">
                                    <li><span class="dropdown-item text-muted">No notifications</span></li>
                                </ul>
                            </li>
                        </ul>
                    }

                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>

    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2025 - FoodMela - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)

    <!-- Notification Toast Box (still keep real-time popup) -->
    <div id="notificationBox" class="position-fixed top-0 end-0 p-3" style="z-index: 9999;"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .build();

        // Real-time new notification
        connection.on("ReceiveNotification", function (message) {
            // Toast
            let box = document.getElementById("notificationBox");
            let alert = document.createElement("div");
            alert.className = "alert alert-info shadow";
            alert.innerText = message;
            box.appendChild(alert);
            setTimeout(() => alert.remove(), 5000);

            loadNotifications(); // Refresh dropdown + badge
        });

        connection.start().catch(err => console.error(err));

        // Load notifications
        async function loadNotifications() {
            try {
                const response = await fetch('/Notifications/GetUserNotifications');
                if (!response.ok) return;
                const data = await response.json();

                const list = document.getElementById("notifList");
                list.innerHTML = "";
                let unreadCount = 0;

                data.forEach(n => {
                    const li = document.createElement("li");
                    li.innerHTML = `
                        <a href="#" class="dropdown-item ${n.isRead ? 'text-muted' : ''}"
                           data-id="${n.id}">
                           ${n.message} <small class="text-muted">(${n.createdAt})</small>
                        </a>`;
                    list.appendChild(li);
                    if (!n.isRead) unreadCount++;
                });

                if (data.length === 0) {
                    list.innerHTML = `<li><span class="dropdown-item text-muted">No notifications</span></li>`;
                }

                let badge = document.getElementById("notifCount");
                if (unreadCount > 0) {
                    badge.classList.remove("d-none");
                    badge.innerText = unreadCount;
                } else {
                    badge.classList.add("d-none");
                }
            } catch (e) { console.error(e); }
        }

        // Mark as read when clicked
        document.addEventListener("click", async function (e) {
            if (e.target.closest("a[data-id]")) {
                e.preventDefault();
                const id = e.target.closest("a").dataset.id;
                await fetch(`/Notifications/MarkAsRead/${id}`, { method: "POST" });
                loadNotifications();
            }
        });

        loadNotifications();
    </script>

</body>
</html>
